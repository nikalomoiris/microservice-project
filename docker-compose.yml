
services:
  postgres-service:
    image: postgres:13
    container_name: postgres-service
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres

    ports:
      - "5432:5432"

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./services/create-databases.sh:/docker-entrypoint-initdb.d/create-databases.sh

  rabbitmq-service:
    image: rabbitmq:3-management
    container_name: rabbitmq-service
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5


  product-service:
    build:
      context: .
      dockerfile: ./services/product-service/Dockerfile
    container_name: product-service
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-service:5432/productsdb
      - SPRING_RABBITMQ_HOST=rabbitmq-service
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka-service:9092
    ports:
      - "8080:8080"
    depends_on:
      postgres-service:
        condition: service_healthy
      rabbitmq-service:
        condition: service_healthy

  zookeeper-service:
    image: confluentinc/cp-zookeeper:7.4.1
    container_name: zookeeper-service
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka-service:
    image: confluentinc/cp-kafka:7.4.1
    container_name: kafka-service
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper-service:2181'
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-service:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper-service

  inventory-service:
    build:
      context: .
      dockerfile: ./services/inventory-service/Dockerfile
    container_name: inventory-service
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-service:5432/inventorydb
      - SPRING_RABBITMQ_HOST=rabbitmq-service
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka-service:9092
    ports:
      - "8083:8083"
    depends_on:
      postgres-service:
        condition: service_healthy
      rabbitmq-service:
        condition: service_healthy

  review-service:
    build:
      context: .
      dockerfile: ./services/review-service/Dockerfile
    container_name: review-service
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-service:5432/reviewsdb
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka-service:9092
    ports:
      - "8082:8082"
    depends_on:
      postgres-service:
        condition: service_healthy

  order-service:
    build:
      context: .
      dockerfile: ./services/order-service/Dockerfile
    container_name: order-service
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-service:5432/ordersdb
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_RABBITMQ_HOST=rabbitmq-service
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka-service:9092
    ports:
      - "8081:8081"
    depends_on:
      postgres-service:
        condition: service_healthy
      rabbitmq-service:
        condition: service_healthy

  logging-service:
    build:
      context: .
      dockerfile: ./services/logging-service/Dockerfile
    container_name: logging-service
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka-service:9092
    ports:
      - "8090:8090"
    depends_on:
      - kafka-service

volumes:
  postgres_data:
