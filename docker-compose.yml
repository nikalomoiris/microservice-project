
services:
  postgres-service:
    image: postgres:13
    container_name: postgres-service
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres

    ports:
      - "5432:5432"

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./services/create-databases.sh:/docker-entrypoint-initdb.d/create-databases.sh

  rabbitmq-service:
    image: rabbitmq:3-management
    container_name: rabbitmq-service
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5


  product-service:
    build:
      context: .
      dockerfile: ./services/product-service/Dockerfile
    container_name: product-service
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-service:5432/productsdb
      - SPRING_RABBITMQ_HOST=rabbitmq-service
    ports:
      - "8080:8080"
    depends_on:
      postgres-service:
        condition: service_healthy
      rabbitmq-service:
        condition: service_healthy

  inventory-service:
    build:
      context: .
      dockerfile: ./services/inventory-service/Dockerfile
    container_name: inventory-service
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-service:5432/inventorydb
      - SPRING_RABBITMQ_HOST=rabbitmq-service
    ports:
      - "8083:8083"
    depends_on:
      postgres-service:
        condition: service_healthy
      rabbitmq-service:
        condition: service_healthy

  review-service:
    build:
      context: .
      dockerfile: ./services/review-service/Dockerfile
    container_name: review-service
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-service:5432/reviewsdb
    ports:
      - "8082:8082"
    depends_on:
      postgres-service:
        condition: service_healthy

volumes:
  postgres_data:
